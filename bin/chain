#!/usr/bin/env python

import os
import sys
import argparse
import importlib.util
from pathlib import Path


#******************************************************************************
# Constants
#

_REQUIRED_PYTHON_VERSION = (3, 11)
_REQUIRED_PYTHON_PACKAGES = ['rich']


#******************************************************************************
# Functions
#

#------------------------------------------------------------------------------
def check_python_version(req_ver):
    cur_ver = sys.version_info

    if (cur_ver[0] != req_ver[0]) or (cur_ver[1] < req_ver[1]):
        sys.stderr.write(
            f"ERROR: [BUILD/INIT] Python version must be '%d.%d' or "
            "greater (within major version %d), current version is '%d.%d'\n" %
            (req_ver[0], req_ver[1], req_ver[0], cur_ver[0], cur_ver[1]))
        sys.exit(-1)

    return 0

#------------------------------------------------------------------------------
def opt_bool_value(value):
    value = value.lower()

    if value in ['true', 't', 'yes', '1']:
        return True
    elif value in ['false', 'f', 'no', '0']:
        return False
    else:
        return None

#------------------------------------------------------------------------------
def get_command_line_parser():
    parser = argparse.ArgumentParser(description='Build system for FPGA/ASIC')

    parser.add_argument(
        'flow',
        help="name of the build flow to run")

    parser.add_argument(
        '-p', '--project-root',
        default=os.getcwd(),
        help='path to the project root (where SConstruct file is located)')

    parser.add_argument(
        '--debug',
        nargs='?',
        const=True,
        type=opt_bool_value,
        help="enable debug messages")

    parser.add_argument(
        '-q', '--quiet',
        nargs='?',
        const=True,
        type=opt_bool_value,
        help="disable information messages")

    #----------------------------------------------------------------
    # Output settings
    #

    parser.add_argument(
        '--force-terminal',
        nargs='?',
        const=True,
        type=opt_bool_value,
        help="don't strip control codes when not writing to a terminal")

    parser.add_argument(
        '--force-interactive',
        nargs='?',
        const=True,
        type=opt_bool_value,
        help="don't remove animation when not writing to a terminal")

    #----------------------------------------------------------------
    # Config files
    #

    parser.add_argument(
        '-c', '--config-home',
        help="home path for configuration files")

    parser.add_argument(
        '--theme-config',
        help="configuration file for console theme")

    parser.add_argument(
        '--flows-config',
        help="configuration file for build flows")

    parser.add_argument(
        '--tools-config',
        help="configuration file for build tools")

    parser.add_argument(
        '--single-flows-config',
        nargs='?',
        const=True,
        type=opt_bool_value,
        help="if specified with '--flows-config' option, the only this "
             "configuration file will be used, without merging with "
             "an other found config files")

    return parser

#------------------------------------------------------------------------------
def main(root_path, args):
    check_python_version(_REQUIRED_PYTHON_VERSION)

    #----------------------------------------------------------------
    # Check required python packages
    #

    not_found_packages = list()
    for name in _REQUIRED_PYTHON_PACKAGES:
        if importlib.util.find_spec(name) is None:
            not_found_packages.append(name)

    if len(not_found_packages) != 0:
        print(
            "ERROR: [BUILD/INIT] The following python packages are not "
            "installed:", ', '.join(not_found_packages))
        sys.exit(-1)

    #----------------------------------------------------------------
    # Initialize build system
    #

    import_path = str(root_path / 'core')
    sys.path.append(import_path)

    import chain
    import SCons.Script

    chain.build_env = chain._BuildEnv(root_path, args)

    #----------------------------------------------------------------
    # Run SCons to build target(s)
    #

    sys.argv = ['-I', import_path, '-C', args.project_root]
    sys.argv += [f'flow={args.flow}', '-Q']

    SCons.Script.main()


#******************************************************************************
# Script entry
#
if __name__ == "__main__":
    bin_path = Path(__file__).resolve().parent
    root_path =  bin_path.parent.resolve()

    parser = get_command_line_parser()
    main(root_path, parser.parse_args())
